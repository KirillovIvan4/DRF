name: Django CI

on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake8
        run: flake8 .

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DB_NAME: test_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost  # Используем localhost вместо postgres
      DB_PORT: 5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install psycopg2-binary

      - name: Wait for PostgreSQL
        run: sleep 10  # Даем время PostgreSQL для запуска

      - name: Verify PostgreSQL connection
        run: |
          sudo apt-get install -y postgresql-client
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "SELECT 1"

      - name: Run migrations
        run: |
          # Очистка и создание базы данных
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS test_db;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE test_db WITH OWNER postgres;"
          
          # Удаление всех миграций
          find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
          find . -path "*/migrations/*.pyc" -delete
          
          # Создание начальных миграций
          python manage.py makemigrations users  # Сначала создаем миграции для users
          python manage.py makemigrations       # Затем для остальных приложений
          
          # Применение миграций в правильном порядке
          python manage.py migrate auth
          python manage.py migrate contenttypes
          python manage.py migrate users
          python manage.py migrate

      - name: Prepare test database
        run: |
          # Создаем тестовую базу данных явно
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE test_test_db;"

          # Применяем миграции к тестовой базе
          python manage.py migrate --database=default --run-syncdb

          # Проверяем состояние миграций
          python manage.py showmigrations

      - name: Run tests
        run: |
          # Запускаем тесты с явным указанием создать тестовую БД
          python manage.py test --keepdb --noinput

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          EOF
